name: Maintainer merge (comment)

on:
  #push:
  issue_comment:
    types: [created, edited]
  pull_request_review:
    # triggers on a review, whether or not it is accompanied by a comment
    types: [submitted]
  pull_request_review_comment:
    types: [created, edited]

jobs:
  ping_zulip:
    env:
      AUTHOR: ${{ github.event.comment.user.login }}${{ github.event.review.user.login }}
      PR_NUMBER: ${{ github.event.issue.number }}${{ github.event.pull_request.number }}
      COMMENT: ${{ github.event.comment.body }}${{ github.event.review.body }}
      PR_TITLE_ISSUE: ${{ github.event.issue.title }}
      PR_TITLE_PR: ${{ github.event.pull_request.title }}
      PR_URL: ${{ github.event.issue.html_url }}${{ github.event.pull_request.html_url }}
      EVENT_NAME: ${{ github.event_name }}
    name: Ping maintainers on Zulip
    runs-on: ubuntu-latest
    steps:
      - name: Find maintainer merge/delegate
        id: merge_or_delegate
        run: |
          printf 'Comment:\n%s\n' "${COMMENT}"
          m_or_d="$(printf '%s\n' "${COMMENT}" |
            sed -n 's=^maintainer  *\(merge\|delegate\)$=\1=p;q}')"

          printf $'"maintainer delegate" or "maintainer merge" found? \'%s\'\n' "${m_or_d}"

          printf $'mOrD=%s\n' "${m_or_d}" > "${GITHUB_OUTPUT}"
          #echo "GREP:"
          #printf '%s\n' "${COMMENT}" | grep "^maintainer \(merge\|delegate\)"
      - name: continue
        if: ${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}
        #if: github.event.issue.pull_request &&
        #    ((startsWith(github.event.comment.body, 'maintainer merge') ||
        #    contains(toJSON(github.event.comment.body), '\nmaintainer merge')) ||
        #    (startsWith(github.event.comment.body, 'maintainer delegate') ||
        #    contains(toJSON(github.event.comment.body), '\nmaintainer delegate')))
        #- name: Check whether user is part of mathlib-reviewers team
        #  uses: TheModdingInquisition/actions-team-membership@v1.0
        #  with:
        #    organization: 'leanprover-community'
        #    team: 'mathlib-reviewers' # required. The team to check for
        #    token: ${{ secrets.MATHLIB_REVIEWERS_TEAM_KEY }} # required. Personal Access Token with the `read:org` permission
        #    comment: 'You seem to not be authorized' # optional. A comment to post if the user is not part of the team.
        #                                            # This feature is only applicable in an issue (or PR) context
        #    exit: true # optional. If the action should exit if the user is not part of the team. Defaults to true.

        uses: actions/checkout@v4
        #with:
        #  ref: master

      - name: Determine Zulip topic
        if: ${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}
        id: determine_topic
        run: |
          echo "${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}"
          echo "'${{ steps.merge_or_delegate.outputs.mOrD }}'"
          ./scripts/get_tlabel.sh "${PR}" >> "$GITHUB_OUTPUT"
        env:
          PR:  /repos/leanprover-community/mathlib4/issues/${{ github.event.issue.number }}
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Form the message
        if: ${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}
        id: form_the_message
        run: |
          PR_TITLE="${PR_TITLE_ISSUE}${PR_TITLE_PR}"
          echo "PR_TITLE: '${PR_TITLE:-PR_TITLE not set}'"
          echo "AUTHOR: '${AUTHOR:-AUTHOR not set}'"
          echo "COMMENT: '${COMMENT:-COMMENT not set}'"
          echo "PR_NUMBER: '${PR_NUMBER:-PR_NUMBER not set}'"
          echo "PR_URL: '${PR_URL:-PR_URL not set}'"
          echo "title: '${PR_TITLE:-PR_TITLE not set}'"
          echo "EVENT_NAME: '${EVENT_NAME:-EVENT_NAME not set}'"
          echo "github.event.action: '${{ github.event.action }}'"

          echo ""
          message="$(
            ./scripts/maintainer_merge_message.sh "${AUTHOR}" "${COMMENT}" "${EVENT_NAME}" "${PR_NUMBER}" "${PR_URL}" "${PR_TITLE}"
          )"
          printf 'title<<EOF\n%s\nEOF' "${message}"
          printf 'title<<EOF\n%s\nEOF' "${message}" >> "$GITHUB_OUTPUT"

      #- name: Send message on Zulip
      #  if: ${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}
      #  uses: zulip/github-actions-zulip/send-message@v1
      #  with:
      #    api-key: ${{ secrets.ZULIP_API_KEY }}
      #    email: 'github-mathlib4-bot@leanprover.zulipchat.com'
      #    organization-url: 'https://leanprover.zulipchat.com'
      #    to: 'mathlib reviewers'
      #    type: 'stream'
      #    topic: ${{ steps.determine_topic.outputs.topic }}
      #    content: |
      #      ${{ steps.form_the_message.outputs.title }}

      #      > ${{ github.event.issue.title }}

      - name: Add comment to PR
        if: ${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}
        uses: GrantBirki/comment@v2
        with:
          issue-number: 18736 # ${{ github.event.issue.number }}
          body: |
            ðŸš€ Pull request has been placed on the maintainer queue by ${{ github.event.comment.user.login }}.
            ${{ steps.form_the_message.outputs.title }}

      #- name: Add label to PR
      #  if: ${{ ! steps.merge_or_delegate.outputs.mOrD == '' }}
      #  uses: actions/github-script@v7
      #  with:
      #    github-token: ${{secrets.GITHUB_TOKEN}}
      #    script: |
      #      const { owner, repo, number: issue_number } = context.issue;
      #      await github.rest.issues.addLabels({ owner, repo, issue_number, labels: ['maintainer-merge'] });
